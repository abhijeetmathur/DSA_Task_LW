class Node:
    """Class to represent a single node in a linked list."""
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    """Class to represent the linked list."""
    def __init__(self):
        self.head = None

    def insert(self, data):
        """Insert a new node at the end of the list."""
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node

    def delete(self, key):
        """Delete the first occurrence of a node with the given key."""
        temp = self.head


        if temp and temp.data == key:
            self.head = temp.next
            temp = None
            return

   
        prev = None
        while temp and temp.data != key:
            prev = temp
            temp = temp.next

        if not temp:
            return

        prev.next = temp.next
        temp = None

    def reverse(self):
        """Reverse the linked list."""
        prev = None
        current = self.head
        while current:
            next_node = current.next  # Store next node
            current.next = prev       # Reverse the current node's pointer
            prev = current            # Move pointers one position forward
            current = next_node
        self.head = prev

    def display(self):
        """Display the linked list."""
        current = self.head
        while current:
            print(current.data, end=' -> ')
            current = current.next
        print('None')


# Example usage
if __name__ == "__main__":
    ll = LinkedList()
    ll.insert(1)
    ll.insert(2)
    ll.insert(3)
    print("Linked List after insertion:")
    ll.display()

    ll.delete(2)
    print("Linked List after deleting 2:")
    ll.display()

    ll.reverse()
    print("Linked List after reversing:")
    ll.display()

